# üß© Nom du workflow visible dans l‚Äôinterface GitHub Actions
name: CI

# üìÖ D√©clencheurs automatiques du workflow
on:
  push:                      # Quand on pousse du code (commit + push)
    branches: [ main ]       # Seulement si on pousse sur la branche "main"
  pull_request:              # Ou quand une pull request est ouverte vers "main"
    branches: [ main ]

jobs:
  # ======================
  # üß™ JOB BACKEND : tests et lint Python
  # ======================
  backend:
    name: üîß Backend Tests & Lint         # Nom du job affich√© dans GitHub Actions
    runs-on: ubuntu-latest               # Le job tourne sur une machine virtuelle Ubuntu

    services:                          # D√©claration des services Docker n√©cessaires
      postgres:                       # Service PostgreSQL (base de donn√©es)
        image: postgres:15            # Utilise l‚Äôimage officielle PostgreSQL version 15
        env:                        # Variables d‚Äôenvironnement pour PostgreSQL
          POSTGRES_USER: root
          POSTGRES_PASSWORD: admin123
          POSTGRES_DB: Restaurant
        ports: [ "5432:5432" ]        # Expose le port 5432 (standard PostgreSQL)

      redis:                         # Service Redis (cache, sessions...)
        image: redis:alpine           # Redis version alpine (all√©g√©e, rapide √† d√©marrer)
        ports: [ "6379:6379" ]        # Expose le port 6379 (standard Redis)

    steps:
      - name: Checkout code          # √âtape 1 : r√©cup√©rer le code source du repo
        uses: actions/checkout@v3

      - name: Cache pip dependencies  # √âtape 2 : mise en cache du dossier pip pour acc√©l√©rer les installs
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip          # Cache le dossier o√π pip stocke ses paquets t√©l√©charg√©s
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }} # Cl√© cache bas√©e sur requirements.txt
          restore-keys: |
            ${{ runner.os }}-pip-     # Cl√© partielle si cache complet non trouv√©

      - name: Set up Python           # √âtape 3 : installer Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies    # √âtape 4 : installer les paquets Python n√©cessaires
        working-directory: backend    # Se placer dans le dossier backend
        run: |
          python -m pip install --upgrade pip   # Met √† jour pip
          pip install httpx
          pip install -r requirements.txt       # Installe les d√©pendances list√©es

      - name: Run flake8 (lint)        # √âtape 5 : analyse du code Python avec flake8 (style, erreurs...)
        working-directory: backend
        run: flake8 .

      - name: Run pytest (tests unitaires)  # √âtape 6 : ex√©cution des tests Python avec pytest
        working-directory: backend
        run: pytest

  # ======================
  # üñ•Ô∏è JOB FRONTEND : lint et tests JavaScript/TypeScript
  # ======================
  frontend:
    name: üåê Frontend Lint & Test      # Nom du job frontend
    runs-on: ubuntu-latest             # Sur une VM Ubuntu

    steps:
      - name: Checkout code            # R√©cup√©rer le code source
        uses: actions/checkout@v3

      - name: Cache node modules       # Mise en cache du dossier node_modules pour acc√©l√©rer npm install
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }} # Cl√© cache bas√©e sur package-lock.json
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Setup Node.js            # Installer Node.js version 18
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies     # Installer les d√©pendances du frontend avec npm
        working-directory: frontend
        run: npm install

      - name: Run ESLint (lint frontend)  # Lancer ESLint pour v√©rifier le style et les erreurs JS/TS
        working-directory: frontend
        run: npm run lint

      - name: Run Jest (tests frontend)   # Ex√©cuter les tests frontend avec Jest, une seule fois (--watchAll=false)
        working-directory: frontend
        run: npm run test -- --watchAll=false

  # ======================
  # üê≥ JOB BUILD DOCKER : construction des images Docker backend & frontend
  # ======================
  build-docker:
    name: üêã Build Docker Images       # Nom du job de build Docker
    runs-on: ubuntu-latest            # Sur une VM Ubuntu

    steps:
      - name: Checkout code           # R√©cup√©rer le code source
        uses: actions/checkout@v3

      - name: Build backend Docker image     # Construire l‚Äôimage Docker du backend
        run: docker build -t restaurant-backend ./backend

      - name: Build frontend Docker image    # Construire l‚Äôimage Docker du frontend
        run: docker build -t restaurant-frontend ./frontend
