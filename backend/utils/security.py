# Importation des modules n√©cessaires

# Importation des modules FastAPI pour g√©rer
# les d√©pendances, les exceptions, et les statuts HTTP
from fastapi import Depends, HTTPException, status

# OAuth2PasswordBearer est utilis√© pour extraire
# automatiquement le token Bearer depuis les requ√™tes
from fastapi.security import OAuth2PasswordBearer

# Modules de la biblioth√®que 'python-jose' pour
# d√©coder et v√©rifier les tokens JWT
from jose import JWTError, jwt

# Session SQLAlchemy pour acc√©der √† la base
# de donn√©es
from sqlalchemy.orm import Session

# On importe le mod√®le User pour pouvoir faire
# une requ√™te sur la base de donn√©es
from models.user import User

# Fonction utilitaire pour obtenir une
# session de base de donn√©es
from database import get_db

# Pour g√©rer les dates d'expiration du token
from datetime import datetime, timedelta

# Pour hacher et v√©rifier les mots de passe
from passlib.context import CryptContext
from config.settings import settings


# üîê Cl√© secr√®te utilis√©e pour signer les JWT
# En production, il faut la stocker dans un fichier
# .env pour qu'elle reste confidentielle
# SECRET_KEY = "devsecret"

# ‚öôÔ∏è Algorithme utilis√© pour signer le token JWT
# HS256 = HMAC avec SHA-256 (couramment utilis√© pour JWT)
# ALGORITHM = "HS256"

# ‚è±Ô∏è Dur√©e de validit√© d'un token JWT (en minutes)
# ACCESS_TOKEN_EXPIRE_MINUTES = 30

# ‚öôÔ∏è Cr√©ation d'un contexte de hachage
# avec passlib
# "bcrypt" est un algorithme s√©curis√©
# pour hacher les mots de passe
# deprecated="auto" signifie qu'il g√®re
# automatiquement les anciennes versions si besoin
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# ‚úÖ Fonction pour v√©rifier si un mot de
# passe "en clair" correspond au mot de passe "hach√©"


def verify_password(plain_password: str, hashed_password: str):
    # Utilise le contexte de passlib pour
    # omparer le mot de passe saisi avec le hash
    return pwd_context.verify(plain_password, hashed_password)

# üîí Fonction pour hacher un mot de passe
# en clair (lors de l'inscription par exemple)


def hash_password(password: str):
    # Utilise bcrypt pour transformer le mot
    # de passe en une cha√Æne illisible (hash√©e)
    return pwd_context.hash(password)


# ü™ô Fonction pour cr√©er un token JWT
# `data` : les infos √† inclure dans le
# token (ex: {"sub": user.email})
# `expires_delta` : dur√©e de vie personnalis√©e
# du token (optionnelle)
def create_access_token(data: dict, expires_delta: timedelta | None = None):
    # Copie les donn√©es envoy√©es pour ne pas
    # les modifier directement
    to_encode = data.copy()

    # Calcule la date d'expiration du token :
    #  maintenant + dur√©e sp√©cifi√©e
    # Si aucune dur√©e n'est sp√©cifi√©e, on prend
    # 15 minutes par d√©faut
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=15))

    # Ajoute une cl√© "exp" (expiration)
    # au payload JWT
    to_encode.update({"exp": expire})

    # Cr√©e le JWT sign√© avec la cl√© secr√®te
    # et l'algorithme sp√©cifi√©
    # Le r√©sultat est une cha√Æne de caract√®res
    # qu'on peut renvoyer au frontend
    return jwt.encode(to_encode, settings.SECRET_KEY,
                      algorithm=settings.ALGORITHM)


# On instancie un sch√©ma OAuth2 pour extraire
# le token dans le header Authorization
# FastAPI va automatiquement chercher un header
# Authorization: Bearer <token> dans les requ√™tes
# `tokenUrl="/token"` indique l'URL qui g√®re
# l'authentification et la g√©n√©ration du token JWT
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/token")

# Fonction pour obtenir l'utilisateur actuellement
# connect√© (repr√©sent√© par le token JWT)
# Le token est r√©cup√©r√© automatiquement depuis
# le header gr√¢ce √† Depends(oauth2_scheme)
# La base de donn√©es est √©galement inject√©e
# automatiquement avec Depends(get_db)


def get_current_user(token: str = Depends(oauth2_scheme),
                     db: Session = Depends(get_db)) -> User:

    # Exception personnalis√©e √† lever si le token
    # est invalide ou que l'utilisateur n'existe pas
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Token invalide",
        headers={"WWW-Authenticate": "Bearer"},
    )

    try:
        # On d√©code le token JWT avec la cl√© secr√®te
        # et l'algorithme pr√©vu
        # Si le token est falsifi√©, expir√© ou mal
        # form√© ‚Üí cela l√®ve une JWTError
        payload = jwt.decode(token, settings.SECRET_KEY,
                             algorithms=[settings.ALGORITHM])

        # On r√©cup√®re l'email (stock√© dans "sub"
        # quand le token a √©t√© cr√©√©)
        email = payload.get("sub")
        if not isinstance(email, str):
            raise credentials_exception
        # Si aucun email n'est trouv√© dans le
        # payload ‚Üí token invalide
        if email is None:
            raise credentials_exception

    # Si une erreur est lev√©e pendant le d√©codage
    # du token ‚Üí on rejette l'acc√®s
    except JWTError:
        raise credentials_exception

    # Requ√™te SQLAlchemy pour r√©cup√©rer l'utilisateur
    # en base gr√¢ce √† son email
    user = db.query(User).filter(User.email == email).first()

    # Si aucun utilisateur n'est trouv√© dans
    # la base ‚Üí token invalide
    if user is None:
        raise credentials_exception

    # Si tout est ok ‚Üí on retourne l'objet
    # tilisateur (donc il est authentifi√©)
    return user


# Fonction de s√©curit√© qui permet de restreindre
# l'acc√®s √† certaines routes
# Elle prend en param√®tre le r√¥le requis pour
# acc√©der √† la route (ex: "admin", "client", etc.)

def require_role(role: str):
    # Fonction interne qui va v√©rifier si l'utilisateur
    # actuellement connect√© a bien le r√¥le requis
    # Elle d√©pend de `get_current_user`, donc elle extrait et
    # valide automatiquement le JWT pour r√©cup√©rer l'utilisateur
    def role_checker(current_user: User = Depends(get_current_user)):

        # Si le r√¥le de l'utilisateur ne correspond pas √† celui exig√©
        if current_user.role.value != role:

            # On l√®ve une erreur 403 Forbidden (acc√®s interdit)
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Acc√©s interdit"
            )

        # Sinon, on retourne l'utilisateur (il est donc bien autoris√©)
        return current_user

# On retourne la fonction `role_checker` (c'est une
# fonction retourn√©e dynamiquement ‚Äî principe des *closures*
#  en Python)
    return role_checker


# On cr√©e des versions pr√™tes √† l'emploi de la fonction
# `require_role` pour chaque r√¥le :
is_admin = require_role("admin")
is_staff = require_role("staff")
is_client = require_role("client")
